# -*- coding: utf-8 -*-


def spindel(plato, theta):
    # geeicht auf 20°C
    theta = int(theta)
    if theta < 20:
        plato_echt = 'Fehler'
    else:
        plato = round(plato, 1)
        platotafel = [    # SG, %GG, %vol, AF
            [1, 0, 0, 0],
            [1.00039, 0.1, 0.1, 0.1],
            [1.00078, 0.2, 0.2, 0.19],
            [1.00117, 0.3, 0.3, 0.29],
            [1.00156, 0.4, 0.4, 0.38],
            [1.00195, 0.5, 0.5, 0.48],
            [1.00234, 0.6, 0.6, 0.58],
            [1.00273, 0.7, 0.7, 0.67],
            [1.00312, 0.8, 0.8, 0.77],
            [1.00351, 0.9, 0.9, 0.86],
            [1.0039, 1, 1, 0.96],
            [1.00429, 1.1, 1.1, 1.06],
            [1.00468, 1.2, 1.2, 1.16],
            [1.00508, 1.3, 1.3, 1.26],
            [1.00547, 1.4, 1.41, 1.35],
            [1.00585, 1.5, 1.51, 1.45],
            [1.00624, 1.6, 1.61, 1.55],
            [1.00663, 1.7, 1.71, 1.64],
            [1.00702, 1.8, 1.81, 1.74],
            [1.00741, 1.9, 1.91, 1.83],
            [1.00781, 2, 2.01, 1.94],
            [1.0082, 2.1, 2.11, 2.04],
            [1.0086, 2.2, 2.21, 2.13],
            [1.00899, 2.3, 2.32, 2.23],
            [1.00938, 2.4, 2.42, 2.33],
            [1.00977, 2.5, 2.52, 2.42],
            [1.01016, 2.6, 2.62, 2.52],
            [1.01056, 2.7, 2.72, 2.62],
            [1.01095, 2.8, 2.83, 2.72],
            [1.01134, 2.9, 2.93, 2.81],
            [1.01173, 3, 3.03, 2.91],
            [1.01214, 3.1, 3.13, 3.01],
            [1.01253, 3.2, 3.23, 3.11],
            [1.01293, 3.3, 3.34, 3.21],
            [1.01332, 3.4, 3.44, 3.31],
            [1.01371, 3.5, 3.54, 3.41],
            [1.01411, 3.6, 3.64, 3.5],
            [1.0145, 3.7, 3.75, 3.6],
            [1.0149, 3.8, 3.85, 3.71],
            [1.01531, 3.9, 3.95, 3.8],
            [1.0157, 4, 4.06, 3.9],
            [1.0161, 4.1, 4.16, 4],
            [1.01649, 4.2, 4.26, 4.1],
            [1.01689, 4.3, 4.36, 4.2],
            [1.01729, 4.4, 4.47, 4.3],
            [1.01768, 4.5, 4.57, 4.4],
            [1.01808, 4.6, 4.67, 4.49],
            [1.01849, 4.7, 4.78, 4.6],
            [1.01889, 4.8, 4.88, 4.69],
            [1.01929, 4.9, 4.99, 4.79],
            [1.01968, 5, 5.09, 4.9],
            [1.02008, 5.1, 5.19, 4.99],
            [1.02048, 5.2, 5.3, 5.1],
            [1.02088, 5.3, 5.4, 5.19],
            [1.02128, 5.4, 5.51, 5.29],
            [1.02168, 5.5, 5.61, 5.4],
            [1.02209, 5.6, 5.71, 5.49],
            [1.02249, 5.7, 5.82, 5.6],
            [1.02289, 5.8, 5.92, 5.69],
            [1.02329, 5.9, 6.03, 5.8],
            [1.0237, 6, 6.13, 5.89],
            [1.0241, 6.1, 6.24, 6],
            [1.0245, 6.2, 6.34, 6.1],
            [1.0249, 6.3, 6.45, 6.2],
            [1.02531, 6.4, 6.55, 6.3],
            [1.02572, 6.5, 6.66, 6.4],
            [1.02612, 6.6, 6.76, 6.5],
            [1.02652, 6.7, 6.87, 6.6],
            [1.02693, 6.8, 6.97, 6.7],
            [1.02733, 6.9, 7.08, 6.81],
            [1.02774, 7, 7.18, 6.91],
            [1.02814, 7.1, 7.29, 7.01],
            [1.02855, 7.2, 7.39, 7.11],
            [1.02896, 7.3, 7.5, 7.21],
            [1.03936, 7.4, 7.6, 7.32],
            [1.02977, 7.5, 7.71, 7.41],
            [1.03018, 7.6, 7.82, 7.52],
            [1.03058, 7.7, 7.92, 7.62],
            [1.03099, 7.8, 8.03, 7.72],
            [1.0314, 7.9, 8.13, 7.82],
            [1.0318, 8, 8.24, 7.92],
            [1.03222, 8.1, 8.35, 8.03],
            [1.03263, 8.2, 8.45, 8.13],
            [1.03304, 8.3, 8.56, 8.23],
            [1.03344, 8.4, 8.67, 8.33],
            [1.03385, 8.5, 8.77, 8.44],
            [1.03426, 8.6, 8.88, 8.54],
            [1.03467, 8.7, 8.99, 8.64],
            [1.03508, 8.8, 9.09, 8.75],
            [1.0355, 8.9, 9.2, 8.85],
            [1.03591, 9, 9.31, 8.95],
            [1.03632, 9.1, 9.41, 9.05],
            [1.03673, 9.2, 9.52, 9.16],
            [1.03714, 9.3, 9.63, 9.26],
            [1.03755, 9.4, 9.74, 9.36],
            [1.03796, 9.5, 9.84, 9.47],
            [1.03837, 9.6, 9.95, 9.57],
            [1.0388, 9.7, 10.06, 9.68],
            [1.03921, 9.8, 10.17, 9.78],
            [1.03962, 9.9, 10.27, 9.88],
            [1.04003, 10, 10.38, 9.98],
            [1.04045, 10.1, 10.49, 10.09],
            [1.04086, 10.2, 10.6, 10.2],
            [1.04127, 10.3, 10.71, 10.3],
            [1.04169, 10.4, 10.81, 10.4],
            [1.04211, 10.5, 10.92, 10.5],
            [1.04253, 10.6, 11.03, 10.61],
            [1.04294, 10.7, 11.14, 10.71],
            [1.04336, 10.8, 11.25, 10.82],
            [1.04377, 10.9, 11.36, 10.92],
            [1.04419, 11, 11.47, 11.03],
            [1.0446, 11.1, 11.57, 11.13],
            [1.04502, 11.2, 11.68, 11.24],
            [1.04545, 11.3, 11.79, 11.34],
            [1.04586, 11.4, 11.9, 11.44],
            [1.04628, 11.5, 12.01, 11.55],
            [1.0467, 11.6, 12.12, 11.65],
            [1.04712, 11.7, 12.23, 11.76],
            [1.04754, 11.8, 12.34, 11.87],
            [1.04795, 11.9, 12.45, 11.97],
            [1.04837, 12, 12.56, 12.08],
            [1.0488, 12.1, 12.67, 12.18],
            [1.04922, 12.2, 12.78, 12.29],
            [1.04964, 12.3, 12.89, 12.39],
            [1.05006, 12.4, 13, 12.5],
            [1.05048, 12.5, 13.11, 12.6],
            [1.0509, 12.6, 13.22, 12.71],
            [1.05132, 12.7, 13.33, 12.82],
            [1.05174, 12.8, 13.44, 12.92],
            [1.05217, 12.9, 13.55, 13.03],
            [1.0526, 13, 13.66, 13.13],
            [1.05302, 13.1, 13.77, 13.25],
            [1.05344, 13.2, 13.88, 13.35],
            [1.05386, 13.3, 13.99, 13.46],
            [1.05429, 13.4, 14.1, 13.56],
            [1.05471, 13.5, 14.21, 13.67],
            [1.05513, 13.6, 14.32, 13.78],
            [1.05557, 13.7, 14.43, 13.88],
            [1.05599, 13.8, 14.55, 13.99],
            [1.05642, 13.9, 14.66, 14.1],
            [1.05684, 14, 14.77, 14.21],
            [1.05727, 14.1, 14.88, 14.31],
            [1.05769, 14.2, 14.99, 14.42],
            [1.05812, 14.3, 15.1, 14.52],
            [1.05854, 14.4, 15.22, 14.62],
            [1.05898, 14.5, 15.33, 14.74],
            [1.05941, 14.6, 15.44, 14.85],
            [1.05983, 14.7, 15.55, 14.96],
            [1.06026, 14.8, 15.66, 15.06],
            [1.05069, 14.9, 15.78, 15.17],
            [1.06112, 15, 15.89, 15.28],
            [1.06154, 15.1, 16, 15.39],
            [1.06197, 15.2, 16.11, 15.49],
            [1.06241, 15.3, 16.22, 15.61],
            [1.06284, 15.4, 16.34, 15.72],
            [1.06327, 15.5, 16.45, 15.82],
            [1.0637, 15.6, 16.56, 15.94],
            [1.06413, 15.7, 16.68, 16.04],
            [1.06456, 15.8, 16.79, 16.15],
            [1.06499, 15.9, 16.9, 16.26],
            [1.06542, 16, 17.02, 16.37],
            [1.06586, 16.1, 17.13, 16.47],
            [1.06629, 16.2, 17.24, 16.59],
            [1.06673, 16.3, 17.36, 16.69],
            [1.06716, 16.4, 17.47, 16.8],
            [1.06759, 16.5, 17.58, 16.92],
            [1.06802, 16.6, 17.7, 17.02],
            [1.06846, 16.7, 17.81, 17.13],
            [1.0689, 16.8, 17.92, 17.24],
            [1.06934, 16.9, 18.04, 17.35],
            [1.06977, 17, 18.15, 17.46],
            [1.0702, 17.1, 18.27, 17.57],
            [1.07064, 17.2, 18.38, 17.68],
            [1.07107, 17.3, 18.5, 17.79],
            [1.07151, 17.4, 18.61, 17.9],
            [1.07194, 17.5, 18.72, 18.01],
            [1.07239, 17.6, 18.84, 18.12],
            [1.07283, 17.7, 18.95, 18.23],
            [1.07326, 17.8, 19.07, 18.34],
            [1.0737, 17.9, 19.18, 18.45],
            [1.07414, 18, 19.3, 18.56],
            [1.07458, 18.1, 19.41, 18.67],
            [1.07501, 18.2, 19.53, 18.79],
            [1.07545, 18.3, 19.64, 18.89],
            [1.0759, 18.4, 19.76, 19.01],
            [1.07634, 18.5, 19.88, 19.11],
            [1.07678, 18.6, 19.99, 19.23],
            [1.07722, 18.7, 20.11, 19.34],
            [1.07766, 18.8, 20.22, 19.45],
            [1.0781, 18.9, 20.34, 19.57],
            [1.07854, 19, 20.45, 19.67],
            [1.07899, 19.1, 20.57, 19.79],
            [1.07943, 19.2, 20.69, 19.9],
            [1.07987, 19.3, 20.8, 20.01],
            [1.08031, 19.4, 20.92, 20.12],
            [1.08075, 19.5, 21.04, 20.23],
            [1.0812, 19.6, 21.15, 20.34],
            [1.08164, 19.7, 21.27, 20.46],
            [1.08208, 19.8, 21.39, 20.57],
            [1.08254, 19.9, 21.5, 20.68]
            ]
        # Auslesen der Dichte
        #print ('plato, theta', plato, theta)
        i = 0
        while plato > platotafel[i][1]:
            i += 1
        #print ('i=', i)
        #print (platotafel[i][1])
        SG = platotafel[i][0]
        #print('SG=', SG)
        dichte_wasser = -0.0005074796 * theta + 1.0103005102
        dichte_wuerze = SG * dichte_wasser
        dichte_20 = dichte_wuerze + (0.0005074796 * (theta - 20))
        SG_20 = dichte_20 / 0.9982
        print ('SG_20=', SG_20)
        # Korrigieren nach der Temperatur
        i = 0
        while SG_20 > platotafel[i][0]:
            i += 1
        plato_echt = platotafel[i][1]
        plato_echt = round(plato_echt, 1)
    return plato_echt


def mischungskreuz(vol_ist, stammw_ist, stammw_soll):
    vol_soll = (vol_ist * stammw_ist) / stammw_soll
    vol_soll = round(vol_soll, 1)
    return vol_soll


def sudhausausbeute(vol_ist, extrakt, schuettung):
    #gilt für 20°C
    ausbeute = (vol_ist * extrakt) / schuettung
    ausbeute = round(ausbeute, 1)
    return ausbeute


def alkoholgehalt(extrakt, restextrakt):
    alkohol = ((0.81 * (extrakt - restextrakt)) / 2.0665) / 0.789
    alkohol = round(alkohol, 1)
    return alkohol


def zucker(co2menge):
    # Annahme 1: Bei Raumtemperatur sind 2g CO2 geloest.
    # Angaben sind g/l
    zuckergabe = (co2menge - 2) / 0.46285991
    zuckergabe = round(zuckergabe, 1)
    return zuckergabe


def ibu(hopfenmenge, alphasaeure, kochdauer, ausschlagwuerze, vol):
    kochzeiten = [5, 10, 15, 20, 30, 40, 50, 60, 70, 80, 100, 120]
    platos = [
        8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
        ]
    ausnutzungsgrad = [
        [5.4, 9.9, 13.5, 16.5, 20.9, 23.8, 25.8, 27.2, 28.1, 28.7, 29.3, 29.6],
        [5.2, 9.5, 13.0, 15.9, 20.1, 23.0, 24.9, 26.2, 27.0, 27.6, 28.3, 28.6],
        [5.0, 9.1, 12.5, 15.3, 19.4, 22.1, 24.0, 25.2, 26.1, 26.6, 27.2, 27.5],
        [4.8, 8.8, 12.1, 14.7, 18.7, 21.3, 23.1, 24.3, 25.1, 25.6, 26.2, 26.5],
        [4.7, 8.5, 11.6, 14.2, 18.0, 20.5, 22.3, 23.4, 24.2, 24.7, 25.3, 25.5],
        [4.5, 8.2, 11.2, 13.7, 17.3, 19.8, 21.4, 22.5, 23.3, 23.8, 24.3, 24.6],
        [4.3, 7.9, 10.8, 13.1, 16.7, 19.0, 20.6, 21.7, 22.4, 22.9, 23.4, 23.7],
        [4.2, 7.6, 10.4, 12.6, 16.0, 18.3, 19.9, 20.9, 21.6, 22.0, 22.5, 22.8],
        [4.0, 7.3, 10.0, 12.2, 15.4, 17.6, 19.1, 20.1, 20.7, 21.2, 21.7, 21.9],
        [3.9, 7.0, 9.6, 11.7, 14.8, 17.0, 18.4, 19.3, 20.0, 20.4, 20.9, 21.1],
        [3.7, 6.7, 9.2, 11.2, 14.3, 16.3, 17.7, 18.6, 19.2, 19.6, 20.1, 20.3],
        [3.6, 6.5, 8.9, 10.8, 13.7, 15.7, 17.0, 17.9, 18.4, 18.8, 19.3, 19.5],
        [3.4, 6.2, 8.5, 10.4, 13.2, 15.1, 16.3, 17.2, 17.7, 18.1, 18.5, 18.7],
        [3.3, 6.0, 8.2, 10.0, 12.7, 14.5, 15.7, 16.5, 17.0, 17.4, 17.8, 18.0],
        [3.2, 5.7, 7.9, 9.6, 12.2, 13.9, 15.1, 15.8, 16.4, 16.7, 17.1, 17.3],
        [3.0, 5.5, 7.5, 9.2, 11.7, 13.3, 14.5, 15.2, 15.7, 16.0, 16.4, 16.6],
        [2.9, 5.3, 7.2, 8.8, 11.2, 12.8, 13.9, 14.6, 15.1, 15.4, 15.8, 15.9],
        [2.8, 5.1, 6.9, 8.5, 10.8, 12.3, 13.3, 14.0, 14.5, 14.8, 15.1, 15.3]
        ]
    i = 0
    while kochdauer > kochzeiten[i]:
        i += 1
    kochdauer = kochzeiten[i]
    #print(kochdauer)
    j = 0
    while ausschlagwuerze > platos[j]:
        j += 1
    ausschlagwuerze = platos[j]
    #print(ausschlagwuerze)
    ausnutzung = ausnutzungsgrad[j][i]
    be = (hopfenmenge * alphasaeure * ausnutzung) / (10 * vol)
    be = round(be, 1)
    return be

u = 'Stammwürze: ' + str(spindel(10, 80)) + '°P\n'
v = 'Zuckergabe zum Jungbier: ' + str(zucker(5.5)) + 'g/l\n'
w = 'Volumen der Anstellwürze: ' + str(mischungskreuz(9, 11, 10)) + ' l\n'
x = 'Sudhausausbeute: ' + str(sudhausausbeute(11, 9, 1.55)) + ' %\n'
y = 'Alkoholgehalt: ' + str(alkoholgehalt(13, 3)) + ' %Vol\n'
z = 'Bitter: ' + str(ibu(20, 7.1, 51, 9.5, 10)) + ' IBU'

print('---\n', u, v, w, x, y, z)